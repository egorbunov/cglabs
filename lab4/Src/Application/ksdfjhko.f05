#include "Transform.h"

void Transform::translate(float dx, float dy, float dz) {
    x += dx;
    y += dy;
    z += dz;
}

void Transform::rotateX(float angle) {
    pitch += angle;
    updateMatrix();
}

void Transform::rotateY(float angle) {
    yaw += angle;
    updateMatrix();
}

void Transform::rotateZ(float angle) {
    roll += angle;
    updateMatrix();
}

const D3DXMATRIX* Transform::getRotationMatrix() const {
    return &rotMat;
}

const D3DXMATRIX* Transform::getTranslationMatrix() const {
    return &trsMat;
}

const D3DXMATRIX* Transform::getScaleMatrix() const {
    return &sclMat;
}



void Transform::scale(float sx, float sy, float sz) {
    this->sx = sx;
    this->sy = sy;
    this->sz = sz;
    updateMatrix();
}

const D3DXMATRIX* Transform::getTransformMatrix() const {
    return &matrix;
}

Transform::Transform(const Transform &obj) {
    rotMat = obj.rotMat;
    trsMat = obj.trsMat;
    sclMat = obj.sclMat;

    sx = obj.sx;
    sy = obj.sy;
    sz = obj.sz;

    x = obj.x;
    y = obj.y;
    z = obj.z;

    pitch = obj.pitch;
    yaw = obj.yaw;
    roll = obj.roll;
}

void Transform::updateMatrix() {
    D3DXMATRIX tmp;
    D3DXMatrixRotationX(&tmp, pitch);         // Pitch
    D3DXMatrixMultiply(&rotMat, &rotMat, &tmp);
    D3DXMatrixRotationY(&tmp, yaw);           // Yaw
    D3DXMatrixMultiply(&rotMat, &rotMat, &tmp);
    D3DXMatrixRotationZ(&tmp, roll);          // Roll
    D3DXMatrixMultiply(&rotMat, &rotMat, &tmp);

    D3DXMatrixTranslation(&trsMat, x, y, z);

    D3DXMatrixScaling(&sclMat, sx, sy, sz);

    matrix = trsMat;
    D3DXMatrixMultiply(&matrix, &rotMat, &matrix);
    D3DXMatrixMultiply(&matrix, &matrix, &sclMat);
}