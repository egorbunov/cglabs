#ifndef RANDOM_ROTATION_H_INCLUDED__
#define RANDOM_ROTATION_H_INCLUDED__

#include "TransformableObject.h"
#include <functional>
#include <random>
#include <vector>

class RandomRotation {
private:
    std::random_device rd;
    std::mt19937 gen;
    std::uniform_real_distribution<float> unifDist;

    float low;
    float high;
    float cur;

    std::vector<TransformableObject *> objects;
    std::vector<std::function<void(TransformableObject*, float val) > > callbacks;
public:
    RandomRotation(float low, float high) : low(low), high(high), cur(low), gen(rd()), unifDist(0, (high - low) / 5) {}

    void addTransformation(TransformableObject *obj, std::function<void(TransformableObject* o, float val)> callback) {
        objects.push_back()
    }

    void next() {
        static float sign = 1.0f;
        cur += unifDist(gen);
        if (cur > high) {
            cur = high;
            sign *= -1;
        }

        for (int i = 0; i < objects.size(); ++i) {
            callbacks[i](objects[i], cur);
        }
    }
};

#endif